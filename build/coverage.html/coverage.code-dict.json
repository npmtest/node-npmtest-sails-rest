{"/home/travis/build/npmtest/node-npmtest-sails-rest/test.js":"/* istanbul instrument in package npmtest_sails_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-rest/lib.npmtest_sails_rest.js":"/* istanbul instrument in package npmtest_sails_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_rest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_rest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-rest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-rest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_rest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_rest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sails_rest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_rest.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sails_rest.__dirname + '/lib.npmtest_sails_rest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-rest/node_modules/sails-rest/index.js":"module.exports = require('./lib/adapter.js');","/home/travis/build/npmtest/node-npmtest-sails-rest/node_modules/sails-rest/lib/adapter.js":"var url = require('url'),\n    Connection = require('./connection'),\n    _ = require('lodash'),\n    hooks = require('./hooks');\n\n/**\n * sails-rest\n *\n * Most of the methods below are optional.\n *\n * If you don't need / can't get to every method, just implement\n * what you have time for.  The other methods will only fail if\n * you try to call them!\n *\n * For many adapters, this file is all you need.  For very complex adapters, you may need more flexiblity.\n * In any case, it's probably a good idea to start with one file and refactor only if necessary.\n * If you do go that route, it's conventional in Node to create a `./lib` directory for your private submodules\n * and load them at the top of the file with other dependencies.  e.g. var update = `require('./lib/update')`;\n */\nmodule.exports = (function () {\n\n\n  // You'll want to maintain a reference to each connection\n  // that gets registered with this adapter.\n  var connections = {};\n\n  // You may also want to store additional, private data\n  // per-connection (esp. if your data store uses persistent\n  // connections).\n  //\n  // Keep in mind that models can be configured to use different databases\n  // within the same app, at the same time.\n  //\n  // i.e. if you're writing a MariaDB adapter, you should be aware that one\n  // model might be configured as `host=\"localhost\"` and another might be using\n  // `host=\"foo.com\"` at the same time.  Same thing goes for user, database,\n  // password, or any other config.\n  //\n  // You don't have to support this feature right off the bat in your\n  // adapter, but it ought to get done eventually.\n  //\n\n  var adapter = {\n\n    // Set to true if this adapter supports (or requires) things like data types, validations, keys, etc.\n    // If true, the schema for models using this adapter will be automatically synced when the server starts.\n    // Not terribly relevant if your data store is not SQL/schemaful.\n    //\n    // If setting syncable, you should consider the migrate option,\n    // which allows you to set how the sync will be performed.\n    // It can be overridden globally in an app (config/adapters.js)\n    // and on a per-model basis.\n    //\n    // IMPORTANT:\n    // `migrate` is not a production data migration solution!\n    // In production, always use `migrate: safe`\n    //\n    // drop   => Drop schema and data, then recreate it\n    // alter  => Drop/add columns as necessary.\n    // safe   => Don't change anything (good for production DBs)\n    //\n    syncable: false,\n\n    // Default configuration for connections\n    defaults: {\n      host:     'localhost:8080',  // api host\n      protocol: 'http',            // api HTTP protocol\n      pathname: '',                // api endpoint path name\n      headers:  {},                // Optional HTTP headers\n      hooks: {\n        merge:    true,              // flag that indicates whether to merge build-in hooks with user-provided hooks\n        before:   [],                // array of hook functions that run before a request\n        after:    []                 // array of hook functions that run after a request\n      }\n    },\n\n    /**\n     *\n     * This method runs when a model is initially registered\n     * at server-start-time.  This is the only required method.\n     *\n     * @param  {[type]}   connection [description]\n     * @param  {[type]}   collection [description]\n     * @param  {Function} cb         [description]\n     * @return {[type]}              [description]\n     */\n    registerConnection: function(connection, collections, cb) {\n      var config = {\n        hooks: {},\n        methods: {\n          create: 'post',\n          find: 'get',\n          update: 'put',\n          destroy: 'del'\n        },\n        headers: connection.headers || {}\n      };\n      if(!connection.identity) return cb(new Error('Connection is missing an identity.'));\n      if(connections[connection.identity]) return cb(new Error('Connection is already registered.'));\n\n      // Add in logic here to initialize connection\n      // e.g. connections[connection.identity] = new Database(connection, collections);\n      config.endpoint = url.format({\n        host: connection.host,\n        pathname: connection.pathname,\n        protocol: connection.protocol\n      });\n      config.http = connection.http || {};\n      config.methods = _.extend(config.methods, (connection.methods || {}));\n\n      if(connection.hooks.merge) {\n        config.hooks.before = hooks.before.concat(connection.hooks.before || []);\n        config.hooks.after = hooks.after.concat(connection.hooks.after || []);\n      } else {\n        config.hooks.before = connection.hooks.before || [];\n        config.hooks.after = connection.hooks.after || [];\n      }\n\n      connections[connection.identity] = config;\n\n      cb();\n    },\n\n\n    /**\n     * Fired when a model is unregistered, typically when the server\n     * is killed. Useful for tearing-down remaining open connections,\n     * etc.\n     *\n     * @param  {Function} cb [description]\n     * @return {[type]}      [description]\n     */\n    // Teardown a Connection\n    teardown: function (conn, cb) {\n\n      if (typeof conn == 'function') {\n        cb = conn;\n        conn = null;\n      }\n      if (!conn) {\n        connections = {};\n        return cb();\n      }\n      if(!connections[conn]) return cb();\n      delete connections[conn];\n      cb();\n    },\n\n    /**\n     * Find record(s)\n     * @param {String} connection - connection identifier\n     * @param {String} collection - collection name. appended to API pathname.\n     *                              For example, given the api `http://localhost:8080/api/v1`,\n     *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n     * @param {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n     * @param {Function} cb - function to call with query results.\n     */\n    find: function (connection, collection, options, cb) {\n      return Connection.find(connections[connection], collection, options, cb);\n    },\n\n    /**\n     * Create record(s)\n     * @param {String} connection - connection identifier\n     * @param {String} collection - collection name. appended to API pathname.\n     *                              For example, given the api `http://localhost:8080/api/v1`,\n     *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n     * @param {Array<Object>} values - values of records to create.\n     * @param {Function} cb - function to call with query results.\n     */\n    create: function (connection, collection, values, cb) {\n      return Connection.create(connections[connection], collection, values, cb);\n    },\n\n    /**\n     * Update record(s)\n     * @param {String} connection - connection identifier\n     * @param {String} collection - collection name. appended to API pathname.\n     *                              For example, given the api `http://localhost:8080/api/v1`,\n     *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n     * @param {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n     * @param {Array<Object>} values - values of records to create.\n     * @param {Function} cb - function to call with query results.\n     */\n    update: function (connection, collection, options, values, cb) {\n      return Connection.update(connections[connection], collection, options, values, cb);\n    },\n\n    /**\n     * Destroy record(s)\n     * @param {String} connection - connection identifier\n     * @param {String} collection - collection name. appended to API pathname.\n     *                              For example, given the api `http://localhost:8080/api/v1`,\n     *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n     * @param {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n     * @param {Function} cb - function to call with query results.\n     */\n    destroy: function (connection, collection, options, cb) {\n      return Connection.destroy(connections[connection], collection, options, cb);\n    }\n\n  };\n\n\n  // Expose adapter definition\n  return adapter;\n\n})();\n\n","/home/travis/build/npmtest/node-npmtest-sails-rest/node_modules/sails-rest/lib/connection.js":"var Connection = {},\n    async = require('async'),\n    url = require('url'),\n    _ = require('lodash'),\n    request = require('superagent');\n\n/**\n * Run all hook functions defined on `connection.hooks.before`.\n * Used to modify request properties before running the actual request.\n * Creates a SuperAgent Request object as soon as `config.endpoint` is defined by one of the hooks.\n *\n * @note When using your own hooks, please ensure the first hook in the chain defines `config.endpoint` properly, so\n *       SuperAgent Request object can be initialized with the correct HTTP endpoint.\n *\n * @param {Request} req - SuperAgent HTTP Request object\n * @param {String}  method - The model method\n * @param {Object}  config - configuration object used to hold request-specific configuration. this is used to avoid polluting the connection's own configuration object.\n * @param {Object}  conn - connection configuration object:\n *    - {Object} connection - Waterline connection configuration object\n *    - {String} collection - collection name. appended to API pathname.\n *                            For example, given the api `http://localhost:8080/api/v1`,\n *                            a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n *    - {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n *    - {Array<Object>} values - values of records to create.\n * @param {Function} cb - function with error (Error object, or a falsy value if finished succesfully) and req (SuperAgent Request object, or undefined if error is not falsy) that is called when runBeforeHooks finishes\n */\nfunction runBeforeHooks(req, method, config, conn, cb){\n  var httpMethod = conn.connection.methods[method];\n  \n  async.eachSeries(conn.connection.hooks.before, function (hook, nextHook) {\n    hook(req, httpMethod, config, conn, function (err) {\n      if(err) {\n        return nextHook(err);\n      }\n      if(!_.isEmpty(config.endpoint) && typeof req === 'undefined'){\n        req = request[httpMethod](config.endpoint);\n        setRequestHeaders(conn.connection, req);\n      }\n      nextHook();\n    });\n  }, function (err) {\n    if(err) {\n      return cb(err);\n    }\n    cb(null, req);\n  });\n}\n\n/**\n * Run all hook functions defined on `connection.hooks.after`.\n * Used to modify the response object and optionally handle any relevant errors if any.\n * @param {Object} connection - connection configuration object\n * @param {Error} err - response error object\n * @param {Response} res - SuperAgent HTTP Response object\n * @param {Function} cb - function with error (Error object, or a falsy value if finished succesfully) that is called when runAfterHooks finishes\n */\nfunction runAfterHooks(connection, err, res, cb){\n  async.eachSeries(connection.hooks.after, function (hook, nextHook) {\n    hook(err, res, nextHook);\n  }, cb);\n}\n\n/**\n * Sets headers on request object before issuing an HTTP request.\n * @param {Object} connection - Waterline connection configuration object\n * @param {Request} req - SuperAgent HTTP Request object\n */\nfunction setRequestHeaders(connection, req) {\n  if(_.isObject(connection.headers)){\n    req.set(connection.headers);\n  }\n}\n\n/**\n * Handle SuperAgent HTTP Response. Calls hook functions followed by Waterline callback.\n * @param {Object} connection - connection configuration object\n * @param {Error} err - response error object\n * @param {Response} res - SuperAgent HTTP Response object\n * @param {Function} cb - function to call with query results.\n */\nfunction handleResponse(connection, err, res, cb) {\n  runAfterHooks(connection, err, res, function (errFromHooks) {\n    if(errFromHooks) {\n      return cb(errFromHooks, null);\n    } else if (res === undefined) {\n      cb(err, null);\n    } else {\n      cb(err, res.body);\n    }\n  });\n}\n\n/**\n * Creates a generic, anonymous HTTP response handler to handle SuperAgent responses.\n * @param {Object} connection - Waterline connection configuration object\n * @param {Function} cb - function to call with query results.\n * @returns {Function} SuperAgent response handler\n */\nfunction getResponseHandler(connection, cb) {\n  return function (err, res) {\n    if (res && !err) {\n      err = null;\n    }\n    handleResponse(connection, err, res, cb);\n  }\n}\n\n/**\n * Find record(s) by issuing an HTTP GET request.\n * @param {Object} connection - connection configuration object\n * @param {String} collection - collection name. appended to API pathname.\n *                              For example, given the api `http://localhost:8080/api/v1`,\n *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n * @param {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n * @param {Function} cb - function to call with query results.\n */\nConnection.find = function (connection, collection, options, cb) {\n  var config = {},\n      req,\n      conn = {\n        connection: connection,\n        collection: collection,\n        options: options,\n        values: {}\n      };\n  runBeforeHooks(req, 'find', config, conn, function (err, req) {\n    if(err) {\n      return cb(err);\n    }\n    return req.query(conn.options).end(function (err, res) {\n      if (res) {\n        err = null;\n      }\n      // Waterline requires that `find` will return an array.\n      // Here we ensure that response body is converted to an array if required.\n      if(!err){\n        if(!Array.isArray(res.body)){\n          res.body = [res.body];\n        }\n      }\n      handleResponse(conn.connection, err, res, cb);\n    });\n  });\n};\n\n/**\n * Create record(s) by issuing an HTTP POST request\n * @param {Object} connection - connection configuration object\n * @param {String} collection - collection name. appended to API pathname.\n *                              For example, given the api `http://localhost:8080/api/v1`,\n *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n * @param {Array<Object>} values - values of records to create.\n * @param {Function} cb - function to call with query results.\n */\nConnection.create = function (connection, collection, values, cb) {\n  var config = {},\n    req,\n    conn = {\n      connection: connection,\n      collection: collection,\n      options: {},\n      values: values\n    };\n  runBeforeHooks(req, 'create', config, conn, function (err, req) {\n    if(err) {\n      return cb(err);\n    }\n    return req.send(conn.values).end(getResponseHandler(conn.connection, cb));\n  });\n};\n\n/**\n * Update record(s) by issuing an HTTP PUT request.\n * @param {Object} connection - connection configuration object\n * @param {String} collection - collection name. appended to API pathname.\n *                              For example, given the api `http://localhost:8080/api/v1`,\n *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n * @param {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n * @param {Array<Object>} values - values of records to create.\n * @param {Function} cb - function to call with query results.\n */\nConnection.update = function (connection, collection, options, values, cb) {\n  var config = {},\n    req,\n    conn = {\n      connection: connection,\n      collection: collection,\n      options: options,\n      values: values\n    };\n  runBeforeHooks(req, 'update', config, conn, function (err, req) {\n    if(err) {\n      return cb(err);\n    }\n    return req.query(conn.options).send(conn.values).end(getResponseHandler(conn.connection, cb));\n  });\n};\n\n/**\n * Destroy record(s) by issuing an HTTP DELETE request.\n * @param {Object} connection - connection configuration object\n * @param {String} collection - collection name. appended to API pathname.\n *                              For example, given the api `http://localhost:8080/api/v1`,\n *                              a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n * @param {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n * @param {Function} cb - function to call with query results.\n */\nConnection.destroy = function (connection, collection, options, cb) {\n  var config = {},\n    req,\n    conn = {\n      connection: connection,\n      collection: collection,\n      options: options,\n      values: {}\n    };\n  runBeforeHooks(req, 'destroy', config, conn, function (err, req) {\n    if(err) {\n      return cb(err);\n    }\n    return req.query(conn.options).end(getResponseHandler(conn.connection, cb));\n  });\n};\n\nmodule.exports = Connection;","/home/travis/build/npmtest/node-npmtest-sails-rest/node_modules/sails-rest/lib/hooks.js":"var url = require('url'),\n    _ = require('lodash'),\n    iso = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?$/;\n\n/**\n * Cleans query options object from Waterline-specific `where` object, by moving `where` values to main query options object.\n * For example, given the query options object `{where:{firstName: \"Tedd\"}, limit: 1}, this function will modify the query options\n * object to {firstName: \"Tedd\", limit: 1}\n *\n * @param {Request} req - SuperAgent HTTP Request object\n * @param {String}  method - HTTP request method\n * @param {Object}  config - configuration object used to hold request-specific configuration. this is used to avoid polluting the connection's own configuration object.\n * @param {Object}  conn - connection configuration object:\n *    - {Object} connection - Waterline connection configuration object\n *    - {String} collection - collection name. appended to API pathname.\n *                            For example, given the api `http://localhost:8080/api/v1`,\n *                            a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n *    - {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n *    - {Array<Object>} values - values of records to create.\n * @param {Function} cb - function that is called when this hook finishes\n */\nfunction removeWhereFromQuery(req, method, config, conn, cb){\n  var query = {};\n  if(_.isObject(conn.options) && conn.options.hasOwnProperty('where')){\n    query = conn.options.where;\n    delete conn.options.where;\n    conn.options = _.merge(conn.options, query);\n  }\n  cb();\n}\n\n/**\n * Createn an HTTP request URL from connection configuration, collection name and query options object.\n * If query options object contains an `id` field, the HTTP URL will be formatted as proto://pathname/collection/id.\n * Otherwise the HTTP URL will be formatted as proto://pathname/collection.\n *\n * @param {Request} req - SuperAgent HTTP Request object\n * @param {String}  method - HTTP request method\n * @param {Object}  config - configuration object used to hold request-specific configuration. this is used to avoid polluting the connection's own configuration object.\n * @param {Object}  conn - connection configuration object:\n *    - {Object} connection - Waterline connection configuration object\n *    - {String} collection - collection name. appended to API pathname.\n *                            For example, given the api `http://localhost:8080/api/v1`,\n *                            a collection named `user` will resolve to `http://localhost:8080/api/v1/user`.\n *    - {Object} options - query options object. contains query conditions (`where`), sort, limit etc. as per Waterline's API.\n *    - {Array<Object>} values - values of records to create.\n * @param {Function} cb - function that is called when this hook finishes\n */\nfunction createEndpoint(req, method, config, conn, cb){\n  if(_.isObject(conn.options) && conn.options.hasOwnProperty('id')){\n    config.endpoint = url.resolve(conn.connection.endpoint + '/', conn.collection + '/' + conn.options.id);\n    delete conn.options.id;\n  } else {\n    config.endpoint = url.resolve(conn.connection.endpoint + '/', conn.collection);\n  }\n  cb();\n}\n\n/**\n * Convert ISO formatted strings on response object into Javascript Date objects.\n * Used to cast date fields returned from HTTP response into their correct Date type.\n * @param {Object} record - response record object to process.\n */\nfunction castRecordDateFields(record) {\n  _.forEach(record, function (value, key) {\n    if(_.isString(value) && iso.test(value)){\n      record[key] = new Date(value);\n    }\n  });\n}\n\n/**\n * Process HTTP response. Converts response objects date fields from Strings to Dates.\n * @param {Error} err - HTTP response error\n * @param {Response} res - SuperAgent HTTP Response object\n * @param {Function} cb - function that is called when this hook finishes\n */\nfunction processResponse(err, res, cb){\n  if(!err) {\n    if(Array.isArray(res.body)){\n      res.body.forEach(function (body) {\n        castRecordDateFields(body);\n      });\n    } else if (_.isObject(res.body)) {\n      castRecordDateFields(res.body);\n    }\n  }\n  cb();\n}\n\nmodule.exports = {\n  before: [removeWhereFromQuery, createEndpoint],\n  after: [processResponse]\n};"}